using System.Collections.Generic;
using System.Drawing;
using System.Web.Script.Serialization;

namespace WindowsCEConsentForms
{
    public class SignatureToImage
    {
        public Color BackgroundColor { get; set; }

        public Color PenColor { get; set; }

        public int CanvasWidth { get; set; }

        public int CanvasHeight { get; set; }

        public float PenWidth { get; set; }

        public float FontSize { get; set; }

        public string FontName { get; set; }

        /// <summary>
        /// Gets a new signature generator with the default options.
        /// </summary>
        public SignatureToImage()
        {
            // Default values
            BackgroundColor = Color.White;
            PenColor = Color.FromArgb(20, 83, 148);
            CanvasWidth = 198;
            CanvasHeight = 45;
            PenWidth = 2;
            FontSize = 24;
            FontName = "Journal";
        }

        /// <summary>
        /// Draws a signature based on the JSON provided by Signature Pad.
        /// </summary>
        /// <param name="json">JSON string of line drawing commands.</param>
        /// <returns>Bitmap image containing the signature.</returns>
        public Bitmap SigJsonToImage(string json)
        {
            var signatureImage = GetBlankCanvas();
            if (!string.IsNullOrEmpty(json))
            {
                using (var signatureGraphic = Graphics.FromImage(signatureImage))
                {
                    signatureGraphic.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                    var pen = new Pen(PenColor, PenWidth);
                    var serializer = new JavaScriptSerializer();

                    // Next line may throw System.ArgumentException if the string
                    // is an invalid json primitive for the SignatureLine structure
                    var lines = serializer.Deserialize<List<SignatureLine>>(json);
                    foreach (var line in lines)
                    {
                        signatureGraphic.DrawLine(pen, line.lx, line.ly, line.mx, line.my);
                    }
                }
            }
            return signatureImage;
        }

        /// <summary>
        /// Get a blank bitmap using instance properties for dimensions and background color.
        /// </summary>
        /// <returns>Blank bitmap image.</returns>
        private Bitmap GetBlankCanvas()
        {
            var blankImage = new Bitmap(CanvasWidth, CanvasHeight);
            blankImage.MakeTransparent();
            using (var signatureGraphic = Graphics.FromImage(blankImage))
            {
                signatureGraphic.Clear(BackgroundColor);
            }
            return blankImage;
        }

        /// <summary>
        /// Line drawing commands as generated by the Signature Pad JSON export option.
        /// </summary>
        private class SignatureLine
        {
            public int lx { get; set; }

            public int ly { get; set; }

            public int mx { get; set; }

            public int my { get; set; }
        }
    }
}